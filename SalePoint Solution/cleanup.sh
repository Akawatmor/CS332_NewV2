#!/bin/bash

# SalePoint Solution - COMPLETE CLEANUP Script
# ‚ö†Ô∏è  WARNING: This will DELETE EVERYTHING - you must start from Step 1 to redeploy
# Removes ALL AWS resources and local files created by the SalePoint deployment

# Parameters
PROJECT_NAME="${1:-salepoint-lab}"
REGION="${2:-us-east-1}"
FORCE_DELETE="${3:-false}"

# Color functions
print_success() { echo -e "\033[32m$1\033[0m"; }
print_warning() { echo -e "\033[33m$1\033[0m"; }
print_error() { echo -e "\033[31m$1\033[0m"; }
print_info() { echo -e "\033[36m$1\033[0m"; }
print_step() { echo -e "\n\033[35m=== $1 ===\033[0m"; }

# Usage function
usage() {
    echo "Usage: $0 [PROJECT_NAME] [REGION] [FORCE_DELETE]"
    echo "  PROJECT_NAME:  Name prefix for AWS resources (default: salepoint-lab)"
    echo "  REGION:        AWS region (default: us-east-1)"
    echo "  FORCE_DELETE:  Skip confirmation prompts (default: false)"
    echo ""
    echo "Example: $0 my-salepoint us-west-2 true"
    exit 1
}

# Help flag
if [[ "$1" == "-h" || "$1" == "--help" ]]; then
    usage
fi

# Header
echo -e "\033[33m"
cat << 'EOF'
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                SalePoint Solution - COMPLETE CLEANUP            ‚ïë
‚ïë              ‚ö†Ô∏è  THIS WILL DELETE EVERYTHING ‚ö†Ô∏è                ‚ïë
‚ïë           You will need to start from Step 1 to redeploy       ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
EOF
echo -e "\033[0m"

print_error "üö® CRITICAL WARNING üö®"
print_error "This script will DELETE ALL SalePoint resources including:"
print_error ""
print_error "‚òÅÔ∏è  AWS CLOUD RESOURCES:"
print_error "  üíÄ CloudFormation stacks (all infrastructure)"
print_error "  ü™£ S3 buckets and ALL uploaded files"
print_error "  ‚ö° Lambda functions (products, customers, sales, analytics)" 
print_error "  üåê API Gateway APIs and endpoints"
print_error "  üóÑÔ∏è  DynamoDB tables and ALL data"
print_error "  üîó IAM roles and policies"
print_error "  üìä CloudWatch logs and metrics"
print_error ""
print_error "üíª LOCAL FILES & ARTIFACTS:"
print_error "  üìÅ Frontend build files (frontend/build/)"
print_error "  üì¶ Node modules (frontend/, backend/)"
print_error "  üéØ ALL 33+ deployment scripts artifacts and outputs"
print_error "  üìã All log files and debug outputs from ALL scripts"
print_error "  ‚öôÔ∏è  Configuration files and backups"
print_error "  üì§ Lambda deployment packages (*.zip files)"
print_error "  üîß Temporary files and caches"
print_error "  üîÑ AWS SAM and CloudFormation artifacts"
print_error "  üß™ ALL testing and validation script outputs"
print_error "  üêõ ALL debugging and parsing script artifacts"
print_error "  üîß ALL fix and enhancement script residuals"
print_error ""
print_error "üî• IMPACT ASSESSMENT:"
print_error "  üåç Complete destruction of your SalePoint deployment"
print_error "  üí∏ All AWS Learner Lab credit usage will stop"
print_error "  üïê All deployment time will be lost (need to start from Step 1)"
print_error "  üìä All test data and customer information will be GONE"
print_error "  üîó All API endpoints will become invalid"
print_error "  üì± Frontend website will be completely removed"
print_error ""
print_warning "‚è∞ RECOVERY TIME: 15-30 minutes to redeploy from scratch using COMPLETE.md"
print_warning "üìö YOU MUST: Follow COMPLETE.md from Step 1 to rebuild everything"
print_warning "üéØ SCRIPTS AFFECTED: All 33+ deployment and testing scripts will need to run again"
print_warning "üîß ARTIFACTS DELETED: All outputs from every deployment script will be removed"
print_warning "üß™ TESTING DATA: All validation and testing results will be permanently lost"

print_info "Project Name: $PROJECT_NAME"
print_info "Region: $REGION"
print_info "Force Delete: $FORCE_DELETE"

# Confirmation unless forced
if [[ "$FORCE_DELETE" != "true" ]]; then
    echo
    print_warning "‚ö†Ô∏è  FINAL WARNING: This will DELETE EVERYTHING related to SalePoint!"
    print_warning "‚ö†Ô∏è  You will need to redeploy from scratch using COMPLETE.md Step 1"
    print_warning "‚ö†Ô∏è  This action CANNOT be undone!"
    echo
    print_error "Resources that will be PERMANENTLY DELETED:"
    print_error "  ‚ùå All AWS infrastructure (APIs, databases, functions)"
    print_error "  ‚ùå All uploaded files and data"
    print_error "  ‚ùå Frontend website and builds"
    print_error "  ‚ùå Configuration files"
    echo
    read -p "‚ùì Are you ABSOLUTELY SURE you want to delete everything? Type 'DELETE' to confirm: " -r
    echo
    if [[ "$REPLY" != "DELETE" ]]; then
        print_success "‚úÖ Cleanup cancelled - your resources are safe!"
        print_info "üí° To clean up properly, type exactly: DELETE"
        exit 0
    fi
    echo
    print_warning "üî• Proceeding with COMPLETE DELETION in 5 seconds..."
    print_warning "üî• Press Ctrl+C NOW to cancel!"
    sleep 5
fi

# Load deployment info if available
DEPLOYMENT_INFO_FILE="deployment-info.json"
if [[ -f "$DEPLOYMENT_INFO_FILE" ]]; then
    print_info "Loading deployment information from $DEPLOYMENT_INFO_FILE"
    FULL_PROJECT_NAME=$(jq -r '.projectName' "$DEPLOYMENT_INFO_FILE" 2>/dev/null || echo "$PROJECT_NAME")
    STACK_NAME=$(jq -r '.stackName' "$DEPLOYMENT_INFO_FILE" 2>/dev/null || echo "$PROJECT_NAME-infrastructure")
else
    print_warning "Deployment info file not found. Using default naming patterns."
    FULL_PROJECT_NAME="$PROJECT_NAME"
    STACK_NAME="$PROJECT_NAME-infrastructure"
fi

# Step 1: Empty S3 Buckets
print_step "Emptying S3 Buckets"

# Find buckets with our project name
BUCKETS=$(aws s3 ls | grep "$FULL_PROJECT_NAME" | awk '{print $3}' || echo "")

if [[ -n "$BUCKETS" ]]; then
    for BUCKET in $BUCKETS; do
        print_info "Emptying bucket: $BUCKET"
        if aws s3 rm "s3://$BUCKET" --recursive >/dev/null 2>&1; then
            print_success "‚úì Bucket $BUCKET emptied"
        else
            print_warning "‚ö† Could not empty bucket $BUCKET"
        fi
    done
else
    print_info "No S3 buckets found with project name pattern"
fi

# Step 2: Delete CloudFormation Stack
print_step "Deleting CloudFormation Stack"

# Check if stack exists
if aws cloudformation describe-stacks --stack-name "$STACK_NAME" --region "$REGION" >/dev/null 2>&1; then
    print_info "Deleting CloudFormation stack: $STACK_NAME"
    
    if aws cloudformation delete-stack --stack-name "$STACK_NAME" --region "$REGION" >/dev/null 2>&1; then
        print_success "Stack deletion initiated"
        
        # Monitor deletion progress
        print_info "Monitoring stack deletion progress..."
        START_TIME=$(date +%s)
        MAX_WAIT_SECONDS=$((20 * 60))  # 20 minutes
        
        while true; do
            sleep 30
            CURRENT_TIME=$(date +%s)
            ELAPSED=$((($CURRENT_TIME - $START_TIME) / 60))
            
            STACK_STATUS=$(aws cloudformation describe-stacks \
                --stack-name "$STACK_NAME" \
                --region "$REGION" \
                --query "Stacks[0].StackStatus" \
                --output text 2>/dev/null || echo "DELETE_COMPLETE")
            
            if [[ "$STACK_STATUS" == "DELETE_COMPLETE" ]]; then
                print_success "Stack deleted successfully!"
                break
            elif [[ "$STACK_STATUS" == *"FAILED"* ]]; then
                print_error "Stack deletion failed with status: $STACK_STATUS"
                break
            else
                print_info "Stack Status: $STACK_STATUS (Elapsed: ${ELAPSED} minutes)"
            fi
            
            if [[ $ELAPSED -gt $((MAX_WAIT_SECONDS / 60)) ]]; then
                print_warning "Stack deletion timed out. Check AWS console for final status."
                break
            fi
        done
    else
        print_error "Failed to initiate stack deletion"
    fi
else
    print_info "CloudFormation stack not found or already deleted"
fi

# Step 3: Clean up orphaned resources
print_step "Cleaning Up Orphaned Resources"

# Delete Lambda functions that might not be in the stack
print_info "Checking for orphaned Lambda functions..."
LAMBDA_FUNCTIONS=$(aws lambda list-functions --region "$REGION" --query "Functions[?contains(FunctionName, '$FULL_PROJECT_NAME')].FunctionName" --output text 2>/dev/null || echo "")

if [[ -n "$LAMBDA_FUNCTIONS" ]]; then
    for FUNCTION in $LAMBDA_FUNCTIONS; do
        print_info "Deleting Lambda function: $FUNCTION"
        if aws lambda delete-function --function-name "$FUNCTION" --region "$REGION" >/dev/null 2>&1; then
            print_success "‚úì Deleted function $FUNCTION"
        else
            print_warning "‚ö† Could not delete function $FUNCTION"
        fi
    done
else
    print_info "No orphaned Lambda functions found"
fi

# Delete API Gateway APIs that might not be in the stack
print_info "Checking for orphaned API Gateway APIs..."
API_IDS=$(aws apigateway get-rest-apis --region "$REGION" --query "items[?contains(name, '$FULL_PROJECT_NAME')].id" --output text 2>/dev/null || echo "")

if [[ -n "$API_IDS" ]]; then
    for API_ID in $API_IDS; do
        print_info "Deleting API Gateway: $API_ID"
        if aws apigateway delete-rest-api --rest-api-id "$API_ID" --region "$REGION" >/dev/null 2>&1; then
            print_success "‚úì Deleted API $API_ID"
        else
            print_warning "‚ö† Could not delete API $API_ID"
        fi
    done
else
    print_info "No orphaned API Gateway APIs found"
fi

# Step 4: COMPREHENSIVE Local File Cleanup
print_step "COMPREHENSIVE Local File Cleanup"

print_info "Removing ALL deployment artifacts, build files, and temporary files..."

# Remove deployment artifacts (comprehensive list based on all 33+ scripts)
LOCAL_FILES=(
    # Build and deployment directories
    "deployments/" 
    "frontend/build/"
    "frontend/node_modules/"
    "backend/node_modules/"
    ".aws-sam/"
    "dist/"
    "tmp/"
    
    # Configuration and environment files
    "deployment-info.json"
    "deployment-info.txt"
    "stack-outputs.json"
    "deployment-*.json"
    "frontend/.env"
    "frontend/.env.local"
    "frontend/.env.production"
    "backend/.env"
    "lambda-env.json"
    
    # Backup files created during deployment
    "frontend/src/index-auth.js.backup"
    "frontend/src/App-auth.js.backup"
    "frontend/src/aws-config.js.backup"
    "frontend/src/config/aws-config.js.backup"
    
    # AWS SAM and CloudFormation files
    "samconfig.toml"
    "template.yaml"
    "template.yml"
    "cloudformation-template.json"
    "cloudformation-template.yaml"
    
    # Lambda deployment packages and zips
    "lambda-deployment-*.zip"
    "*.zip"
    "orders-deployment*.zip"
    "temp-*.zip"
    "products-deployment*.zip"
    "customers-deployment*.zip"
    
    # Temporary package files
    "temp-package.json"
    "lambda-package.json"
    "package-lock.json.backup"
    
    # Database and initialization files
    "init-db-payload.json"
    "init-products-payload.json"
    "test-payload.json"
    "response.json"
    
    # Log files from all deployment scripts
    "*.log"
    "deployment.log"
    "error.log"
    "debug.log"
    "aws-cli.log"
    "lambda.log"
    "cloudformation.log"
    
    # Python cache and artifacts
    "__pycache__/"
    "*.pyc"
    "*.pyo"
    "*.pyd"
    ".Python"
    
    # Node.js cache and artifacts
    ".npm/"
    "npm-debug.log*"
    "yarn-debug.log*"
    "yarn-error.log*"
    ".pnpm-debug.log*"
    
    # IDE and editor files
    ".vscode/settings.json.backup"
    ".idea/"
    "*.swp"
    "*.swo"
    "*~"
    
    # AWS and deployment specific temp files
    "aws-exports.js"
    "amplify-meta.json"
    ".amplify/"
    
    # Status and monitoring files created by scripts
    "status.json"
    "health-check.json"
    "api-test-results.json"
    
    # Script-generated temporary files
    "temp-*"
    "tmp-*"
    ".tmp-*"
    "debug-*"
    
    # Additional deployment artifacts
    "deployment-outputs.txt"
    "api-endpoints.txt"
    "resource-list.txt"
    "cleanup-log.txt"
)

print_info "üóëÔ∏è  COMPREHENSIVE CLEANUP - Removing all deployment artifacts:"
print_info "   üìÅ Build directories and node_modules"
print_info "   ‚öôÔ∏è  Configuration and environment files"  
print_info "   üì¶ Lambda deployment packages and zips"
print_info "   üîß Temporary and backup files"
print_info "   üìã Log files and debug outputs"
print_info "   üéØ AWS SAM and CloudFormation artifacts"
print_info "   üìä Status and monitoring files"
print_info "   üíæ Cache files and IDE artifacts"

CLEANUP_COUNT=0
for FILE in "${LOCAL_FILES[@]}"; do
    if [[ -e "$FILE" ]] || [[ $(ls $FILE 2>/dev/null | wc -l) -gt 0 ]]; then
        print_info "üóëÔ∏è  Removing: $FILE"
        rm -rf $FILE 2>/dev/null || rm -f $FILE 2>/dev/null || true
        print_success "‚úì Removed $FILE"
        ((CLEANUP_COUNT++))
    fi
done

print_success "‚úÖ Removed $CLEANUP_COUNT deployment artifacts"

# Reset ALL frontend configuration files to default
print_info "üîÑ Resetting ALL frontend configuration to defaults..."

CONFIG_RESET_COUNT=0

# Reset main aws-config.js
if [[ -f "frontend/src/config/aws-config.js.backup" ]]; then
    cp "frontend/src/config/aws-config.js.backup" "frontend/src/config/aws-config.js"
    print_success "‚úì Reset aws-config.js to default"
    ((CONFIG_RESET_COUNT++))
fi

# Reset any other backup files
BACKUP_FILES=$(find . -name "*.backup" 2>/dev/null || true)
if [[ -n "$BACKUP_FILES" ]]; then
    while IFS= read -r BACKUP_FILE; do
        ORIGINAL_FILE="${BACKUP_FILE%.backup}"
        if [[ -f "$BACKUP_FILE" ]]; then
            cp "$BACKUP_FILE" "$ORIGINAL_FILE"
            print_success "‚úì Reset $(basename $ORIGINAL_FILE) from backup"
            ((CONFIG_RESET_COUNT++))
        fi
    done <<< "$BACKUP_FILES"
fi

print_success "‚úÖ Reset $CONFIG_RESET_COUNT configuration files"

# Clean ALL caches
print_info "üßπ Cleaning ALL caches and temporary data..."

CACHE_CLEAN_COUNT=0

# Clean npm cache if possible
if command -v npm &> /dev/null; then
    print_info "Cleaning npm cache..."
    cd frontend 2>/dev/null && npm cache clean --force 2>/dev/null || true
    cd .. 2>/dev/null || true
    print_success "‚úì Cleaned npm cache"
    ((CACHE_CLEAN_COUNT++))
fi

# Clean yarn cache if possible
if command -v yarn &> /dev/null; then
    print_info "Cleaning yarn cache..."
    yarn cache clean 2>/dev/null || true
    print_success "‚úì Cleaned yarn cache"
    ((CACHE_CLEAN_COUNT++))
fi

# Clean AWS CLI cache
AWS_CACHE_DIR="$HOME/.aws/cli/cache"
if [[ -d "$AWS_CACHE_DIR" ]]; then
    rm -rf "$AWS_CACHE_DIR" 2>/dev/null || true
    print_success "‚úì Cleaned AWS CLI cache"
    ((CACHE_CLEAN_COUNT++))
fi

# Clean AWS SAM cache
SAM_CACHE_DIR="$HOME/.aws-sam"
if [[ -d "$SAM_CACHE_DIR" ]]; then
    rm -rf "$SAM_CACHE_DIR" 2>/dev/null || true
    print_success "‚úì Cleaned AWS SAM cache"
    ((CACHE_CLEAN_COUNT++))
fi

print_success "‚úÖ Cleaned $CACHE_CLEAN_COUNT cache systems"

# Remove ALL script-generated files and artifacts
print_info "üßπ Removing ALL script-generated files and artifacts..."

SCRIPT_FILES_COUNT=0

# Remove files that might be generated by the 33+ deployment scripts
SCRIPT_GENERATED_PATTERNS=(
    # General output patterns
    "*-output.txt"
    "*-result.json"
    "*-status.json"
    "*-log.txt"
    "deployment-*"
    "validate-*"
    "test-*-output"
    "debug-*-log"
    "api-test-*"
    "lambda-test-*"
    "cloudformation-*"
    "s3-*-output"
    "rds-*-result"
    "check-*-result"
    
    # Specific script outputs based on our 33+ scripts
    "connect-rds-*"
    "debug-parsing-*"
    "debug-sql-parsing-*"
    "demo-solution-*"
    "deploy-complete-final-*"
    "deploy-complete-*"
    "deploy-demo-*"
    "deploy-enhanced-*"
    "deploy-learner-lab-simple-*"
    "deploy-learner-lab-*"
    "deploy-status-check-*"
    "deploy-with-rds-*"
    "final-system-test-*"
    "fix-bucket-policy-*"
    "fix-deployment-*"
    "fix-lambda-502-final-*"
    "fix-lambda-502-*"
    "fix-s3-frontend-*"
    "init-database-*"
    "init-sample-data-*"
    "quick-status-*"
    "test-api-*"
    "test-complete-system-*"
    "test-database-init-*"
    "test-deployment-guide-*"
    "test-function-direct-*"
    "test-learner-lab-*"
    "test-one-stop-service-*"
    "test-rds-connection-*"
    "test-sql-parsing-clean-*"
    "test-sql-parsing-*"
    "test-values-extraction-*"
    "validate-deployment-*"
    "validate-sql-parsing-final-*"
    
    # Status and monitoring outputs
    "status-check-*"
    "health-check-*"
    "system-test-*"
    "deployment-status-*"
    "validation-results-*"
    "parsing-results-*"
    "sql-test-*"
    "lambda-502-fix-*"
    "bucket-policy-*"
    "s3-fix-*"
    "rds-connection-*"
    "database-init-*"
    "sample-data-*"
)

for PATTERN in "${SCRIPT_GENERATED_PATTERNS[@]}"; do
    FILES_FOUND=$(ls $PATTERN 2>/dev/null || true)
    if [[ -n "$FILES_FOUND" ]]; then
        while IFS= read -r FILE; do
            if [[ -f "$FILE" ]]; then
                rm -f "$FILE"
                print_success "‚úì Removed script-generated file: $FILE"
                ((SCRIPT_FILES_COUNT++))
            fi
        done <<< "$FILES_FOUND"
    fi
done

print_success "‚úÖ Removed $SCRIPT_FILES_COUNT script-generated files"

# Additional cleanup for specific deployment script artifacts
print_info "üßπ Cleaning up additional deployment script artifacts..."

ADDITIONAL_CLEANUP_COUNT=0

# Clean up specific script execution logs and status files
ADDITIONAL_FILES=(
    "deployment-completion-*.log"
    "system-status-*.json"
    "api-endpoint-*.txt"
    "lambda-function-*.json"
    "database-connection-*.log"
    "rds-validation-*.txt"
    "s3-deployment-*.log"
    "cloudformation-events-*.json"
    "error-trace-*.log"
    "debug-session-*.txt"
    "test-execution-*.json"
    "validation-report-*.html"
    "deployment-timeline-*.log"
    "resource-monitoring-*.json"
    "health-status-*.txt"
)

for PATTERN in "${ADDITIONAL_FILES[@]}"; do
    FILES_FOUND=$(ls $PATTERN 2>/dev/null || true)
    if [[ -n "$FILES_FOUND" ]]; then
        while IFS= read -r FILE; do
            if [[ -f "$FILE" ]]; then
                rm -f "$FILE"
                print_success "‚úì Removed additional artifact: $FILE"
                ((ADDITIONAL_CLEANUP_COUNT++))
            fi
        done <<< "$FILES_FOUND"
    fi
done

print_success "‚úÖ Removed $ADDITIONAL_CLEANUP_COUNT additional script artifacts"

print_success "üéâ COMPREHENSIVE LOCAL CLEANUP COMPLETE!"
print_info "üìä Comprehensive Cleanup Summary:"
print_info "   üóëÔ∏è  $CLEANUP_COUNT deployment artifacts removed"
print_info "   üîÑ $CONFIG_RESET_COUNT configuration files reset"
print_info "   üßπ $CACHE_CLEAN_COUNT cache systems cleaned"
print_info "   üìÑ $SCRIPT_FILES_COUNT script-generated files removed"
print_info "   üîß $ADDITIONAL_CLEANUP_COUNT additional script artifacts removed"

TOTAL_CLEANED=$((CLEANUP_COUNT + CONFIG_RESET_COUNT + CACHE_CLEAN_COUNT + SCRIPT_FILES_COUNT + ADDITIONAL_CLEANUP_COUNT))
print_success "‚úÖ Total: $TOTAL_CLEANED items comprehensively cleaned up!"

print_info ""
print_info "üéØ DEPLOYMENT SCRIPTS COVERAGE:"
print_info "   ‚úÖ All 33+ deployment script outputs cleaned"
print_info "   ‚úÖ All testing and validation artifacts removed" 
print_info "   ‚úÖ All debugging and fix script residuals cleared"
print_info "   ‚úÖ All configuration backups and temporary files deleted"
print_info "   ‚úÖ All caches and build artifacts purged"

# Step 5: Final verification
print_step "Final Verification"

print_info "Verifying resource cleanup..."

# Check remaining stacks
REMAINING_STACKS=$(aws cloudformation list-stacks \
    --stack-status-filter CREATE_COMPLETE UPDATE_COMPLETE \
    --query "StackSummaries[?contains(StackName, '$PROJECT_NAME')].StackName" \
    --output text --region "$REGION" 2>/dev/null || echo "")

if [[ -n "$REMAINING_STACKS" ]]; then
    print_warning "Remaining stacks found: $REMAINING_STACKS"
else
    print_success "‚úì No remaining CloudFormation stacks"
fi

# Check remaining buckets
REMAINING_BUCKETS=$(aws s3 ls | grep "$PROJECT_NAME" | awk '{print $3}' || echo "")

if [[ -n "$REMAINING_BUCKETS" ]]; then
    print_warning "Remaining buckets found: $REMAINING_BUCKETS"
    print_info "Note: Some buckets may need to be manually deleted if they have versioning enabled"
else
    print_success "‚úì No remaining S3 buckets with project name"
fi

# Display cleanup summary
print_step "COMPLETE CLEANUP SUMMARY"

cat << EOF

‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                 üö® COMPLETE DELETION FINISHED üö®                ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üî• EVERYTHING HAS BEEN DELETED:
   ‚úÖ CloudFormation stacks deleted
   ‚úÖ S3 buckets emptied and deleted
   ‚úÖ Lambda functions removed
   ‚úÖ API Gateway APIs removed
   ‚úÖ DynamoDB tables deleted
   ‚úÖ Frontend builds deleted
   ‚úÖ Local configuration reset
   ‚úÖ Deployment artifacts removed

üîÑ TO REDEPLOY SALEPOINT:
   1. Open COMPLETE.md
   2. Follow Step 1: Navigate to project directory
   3. Follow Step 2: Run complete deployment
   4. Follow Step 3: Access your new application

üí° Learner Lab Notes:
   ‚Ä¢ All resources have been deleted - no more credit usage
   ‚Ä¢ Your Learner Lab environment is now clean
   ‚Ä¢ You can safely restart deployment from scratch
   ‚Ä¢ Check AWS console to verify all resources are gone

üìÅ Next Steps:
   chmod +x deploy-complete.sh
   ./deploy-complete.sh

EOF

print_success "üéâ SalePoint Solution COMPLETELY REMOVED!"
print_warning "üîÑ To redeploy, start from COMPLETE.md Step 1"

if [[ -n "$REMAINING_STACKS" || -n "$REMAINING_BUCKETS" ]]; then
    print_warning "\n‚ö†Ô∏è  If any resources remain, check AWS console and delete manually."
    print_info "üí° Some resources may take a few minutes to fully delete."
fi

echo
print_info "üöÄ Ready for fresh deployment! Check COMPLETE.md for instructions."
